#include "execution/executors/window_function_executor.h"
#include "execution/executors/sort_executor.h"
#include "execution/plans/window_plan.h"
#include "storage/table/tuple.h"

namespace bustub {

WindowFunctionExecutor::WindowFunctionExecutor(ExecutorContext *exec_ctx, const WindowFunctionPlanNode *plan,
                                               std::unique_ptr<AbstractExecutor> &&child_executor)
    : AbstractExecutor(exec_ctx), plan_(plan), child_executor_(std::move(child_executor)) {}

void WindowFunctionExecutor::Init() {
  child_executor_->Init();

  Tuple child_tuple;
  RID rid;
  std::vector<Tuple> child_tuples;
  while (child_executor_->Next(&child_tuple, &rid)) {
    child_tuples.push_back(child_tuple);
  }

  auto internal_cmp = [](const Tuple &a, const Tuple &b,
                         const std::vector<std::pair<OrderByType, AbstractExpressionRef>> &order_bys,
                         const Schema &schema) {
    for (const auto &order_key : order_bys) {
      switch (order_key.first) {
        case OrderByType::INVALID:
        case OrderByType::DEFAULT:
        case OrderByType::ASC:
          if (static_cast<bool>(
                  order_key.second->Evaluate(&a, schema).CompareLessThan(order_key.second->Evaluate(&b, schema)))) {
            return true;
          } else if (static_cast<bool>(order_key.second->Evaluate(&a, schema)
                                           .CompareGreaterThan(order_key.second->Evaluate(&b, schema)))) {
            return false;
          }
          break;
        case OrderByType::DESC:
          if (static_cast<bool>(
                  order_key.second->Evaluate(&a, schema).CompareGreaterThan(order_key.second->Evaluate(&b, schema)))) {
            return true;
          } else if (static_cast<bool>(order_key.second->Evaluate(&a, schema)
                                           .CompareLessThan(order_key.second->Evaluate(&b, schema)))) {
            return false;
          }
          break;
      }
    }
    return false;
  };

  std::unordered_set<uint32_t> func_column_idx_set;
  for (auto &[func_column_idx, window_function] : plan_->window_functions_) {
    func_column_idx_set.insert(func_column_idx);
  }

  // Note: All window function aggregate the columns not generated by aggregation function.
  for (auto &[func_column_idx, window_function] : plan_->window_functions_) {
    // combine partition_by and order_by
    std::vector<std::pair<OrderByType, AbstractExpressionRef>> total_orders{};
    std::vector<std::pair<OrderByType, AbstractExpressionRef>> partition_orders{};
    for (const auto &partition_by : window_function.partition_by_) {
      total_orders.emplace_back(OrderByType::ASC, partition_by);
      partition_orders.emplace_back(OrderByType::ASC, partition_by);
    }
    for (const auto &order_by : window_function.order_by_) {
      total_orders.push_back(order_by);
    }

    // sort the child_tuples based on partition_by and order_by
    std::sort(child_tuples.begin(), child_tuples.end(),
              [order_bys = total_orders, schema = child_executor_->GetOutputSchema(), internal_cmp](
                  const Tuple &a, const Tuple &b) { return internal_cmp(a, b, order_bys, schema); });

    auto group_bys = window_function.partition_by_;
    auto agg_expr = window_function.function_;

    WindowAggregate wind_agg{plan_->columns_,
                             group_bys,
                             agg_expr,
                             func_column_idx,
                             func_column_idx_set,
                             window_function.type_,
                             window_function.order_by_,
                             child_executor_->GetOutputSchema(),
                             plan_->OutputSchema(),
                             tuples_};

    // split partitions and execute the window function per partition
    auto iter = child_tuples.begin();
    while (iter != child_tuples.end()) {
      auto upper_bound_iter =
          std::upper_bound(iter, child_tuples.end(), *iter,
                           [order_bys = partition_orders, schema = child_executor_->GetOutputSchema(), internal_cmp](
                               const Tuple &a, const Tuple &b) { return internal_cmp(a, b, order_bys, schema); });
      wind_agg.Compute(iter, upper_bound_iter, child_tuples.begin());
      iter = upper_bound_iter;
    }
  }
  iter_ = tuples_.begin();
}

auto WindowFunctionExecutor::Next(Tuple *tuple, RID *rid) -> bool {
  while (iter_ != tuples_.end()) {
    *tuple = *iter_;
    iter_++;
    return true;
  }
  return false;
}
}  // namespace bustub